using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;

public class LvLGenerator : MonoBehaviour
{
    public int Size = 5;
    public Room[] RoomPrefabs;
    public Room StartingRoom;

    private Room[,] SpawnedRooms;

    // Start is called before the first frame update
    private IEnumerator Start()
    {
        SpawnedRooms = new Room[11, 11];
        SpawnedRooms[5, 5] = StartingRoom;
        for (int i = 0; i < Size; i++)
        {
            PlaceOneRoom();
            yield return new WaitForSecondsRealtime(0.5f);
        }
    }

    // Update is called once per frame
    void PlaceOneRoom()
    {
        HashSet<Vector2Int> VacantPlaces = new HashSet<Vector2Int>();
        for (int x = 0; x < SpawnedRooms.GetLength(0); x++)
        {
            for (int y = 0; y < SpawnedRooms.GetLength(1); y++)
            {
                if (SpawnedRooms[x, y] == null) continue;

                int MaxX = SpawnedRooms.GetLength(0) - 1;
                int MaxY = SpawnedRooms.GetLength(1) - 1;

                if (x > 0 && SpawnedRooms[x - 1, y] == null) VacantPlaces.Add(new Vector2Int(x - 1, y));
                if (y > 0 && SpawnedRooms[y - 1, y] == null) VacantPlaces.Add(new Vector2Int(x, y - 1));
                if (x < MaxX && SpawnedRooms[x + 1, y] == null) VacantPlaces.Add(new Vector2Int(x + 1, y));
                if (y < MaxY && SpawnedRooms[y + 1, y] == null) VacantPlaces.Add(new Vector2Int(x, y + 1));
            }
        }
        Room newRoom = Instantiate(RoomPrefabs[Random.Range(0, RoomPrefabs.Length)]);

        int limit = 500;
        while (limit-- > 0)
            {

               Vector2Int position = VacantPlaces.ElementAt(Random.Range(0, VacantPlaces.Count));
               

            if (ConnectToSomething(newRoom, position) )
            {
                SpawnedRooms[position.x, position.y] = newRoom;
                newRoom.transform.position = new Vector3(position.x - 5, 0, position.y - 5) * 20;
                break;

            }
        }

        }

        private bool ConnectToSomething(Room Room, Vector2Int p)
    {
        int MaxX = SpawnedRooms.GetLength(0) - 1;
        int MaxY = SpawnedRooms.GetLength(1) - 1;

        List<Vector2Int> Closest = new List<Vector2Int>();

        if (Room.door_u != null && p.y < MaxY && SpawnedRooms[p.x, p.y + 1]?.door_b != null)  Closest.Add(Vector2Int.up);
        if (Room.door_b != null && p.y  > 0 && SpawnedRooms[p.x, p.y - 1]?.door_b != null) Closest.Add(Vector2Int.down);
        if (Room.door_r != null && p.x < MaxX && SpawnedRooms[p.x + 1, p.y]?.door_b != null) Closest.Add(Vector2Int.right);
        if (Room.door_l != null && p.x > 0 && SpawnedRooms[p.x - 1, p.y]?.door_b != null) Closest.Add(Vector2Int.left);

        if (Closest.Count == 0) return false;


        Vector2Int SelectDir = Closest[Random.Range(0, Closest.Count)];
        Room SelectedRoom = SpawnedRooms[p.x + SelectDir.x, p.y + SelectDir.y];

        if (SelectDir == Vector2Int.up)
        {
            Room.door_u.SetActive(false);
            SelectedRoom.door_b.SetActive(false);
        }
        if (SelectDir == Vector2Int.down)
        {
            Room.door_b.SetActive(false);
            SelectedRoom.door_u.SetActive(false);
        }
        if (SelectDir == Vector2Int.left)
        {
            Room.door_l.SetActive(false);
            SelectedRoom.door_r.SetActive(false);
        }
        if (SelectDir == Vector2Int.right)
        {
            Room.door_r.SetActive(false);
            SelectedRoom.door_l.SetActive(false);
        }

        return true;
    }
}
